{"version":3,"file":"static/js/559.01318b3d.chunk.js","mappings":"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","sources":["api/profile.js","pages/UserInfo.jsx","utils/user.js","utils/userSelectItems.js"],"sourcesContent":["import { ERROR_MESSAGE } from \"../utils/constants\";\r\nimport showToast from \"../utils/toast\";\r\nimport api from \"./api\";\r\n\r\n/**\r\n * 프로필 사진 변경\r\n * @param {string} userId\r\n * @param {any} formData\r\n */\r\nconst postUserProfileImg = async (userId, formData) => {\r\n  try {\r\n    const { data } = await api.post(\r\n      `/auth/userinfo/profileimg/upload/${userId}`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      },\r\n    );\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"프로필 사진 업로드 에러\");\r\n  }\r\n};\r\n\r\nconst updateUserProfile = async (userId, updateUserProfileAPIBody) => {\r\n  try {\r\n    const { data } = await api.post(\r\n      `/auth/userinfo/update/${userId}`,\r\n      updateUserProfileAPIBody,\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"프로필 변경 에러\");\r\n  }\r\n};\r\n\r\nconst postCheckNickName = async (postCheckNickNameAPIBody) => {\r\n  try {\r\n    const { data } = await api.post(\"/auth/nickname/check\", postCheckNickNameAPIBody);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"닉네임 체크 에러\");\r\n  }\r\n};\r\n\r\nexport { postUserProfileImg, postCheckNickName, updateUserProfile };\r\n","// npm package\r\nimport React, { useRef, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\n// api\r\nimport { postUserProfileImg, updateUserProfile } from \"../api/profile\";\r\n\r\n// design library (mantine)\r\nimport { Avatar, Input, Select } from \"@mantine/core\";\r\n\r\n// recoil\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { userInfoState } from \"../store/recoilAuthState\";\r\n\r\n// icon\r\nimport \"../assets/scss/pages/userinfo.scss\";\r\n\r\n// utils\r\nimport showToast from \"../utils/toast\";\r\nimport { AGE_RANGE, GENDER } from \"../utils/userSelectItems\";\r\nimport { NICKNAME_CHECK_WARNING, UPDATE_PROFILE_SUCCESS } from \"../utils/constants\";\r\nimport isNicknameCheck from \"../utils/user\";\r\n\r\nconst UserInfo = () => {\r\n  const { state } = useLocation();\r\n  const navigate = useNavigate();\r\n  const user = state;\r\n  const nicknameInput = useRef();\r\n  const profileImgInput = useRef();\r\n\r\n  const setUserInfo = useSetRecoilState(userInfoState);\r\n  const [profileImagePreview, setProfileImagePreview] = useState(user.profileImage);\r\n\r\n  const [nickName, setNickName] = useState(user.nickname);\r\n  const [nicknameChecked, setNicknameChecked] = useState(\"empty\");\r\n  const [ageRange, setAgeRange] = useState(user.age);\r\n  const [gender, setGender] = useState(user.gender);\r\n\r\n  const onChangeHandler = (e, state) => {\r\n    if (state === \"nickname\") setNickName(e.target.value);\r\n    else if (state === \"age\") setAgeRange(e);\r\n    else if (state === \"gender\") setGender(e);\r\n  };\r\n\r\n  const onImgChange = async (e) => {\r\n    const formData = new FormData();\r\n    encodeFileToBase64(e.target.files[0]);\r\n    formData.append(\"images\", e.target.files[0]);\r\n    await postUserProfileImg(user.id, formData);\r\n  };\r\n\r\n  // 프로필 사진 미리보기 인코딩\r\n  const encodeFileToBase64 = (fileBlob) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(fileBlob);\r\n    return new Promise((resolve) => {\r\n      reader.onload = () => {\r\n        setProfileImagePreview(reader.result);\r\n        resolve();\r\n      };\r\n    });\r\n  };\r\n\r\n  // 프로필 사진 수정 버튼 클릭\r\n  const onProfileImgBtnClick = (e) => {\r\n    e.preventDefault();\r\n    profileImgInput.current.click();\r\n  };\r\n\r\n  // 닉네임 중복 체크\r\n  const onClickNicknameCheck = async () => {\r\n    setNicknameChecked(await isNicknameCheck(nickName));\r\n  };\r\n\r\n  // 회원정보 수정하기 버튼\r\n  const onClickUserInfoUpdate = async () => {\r\n    const updateUserProfileAPIBody = {\r\n      nickname: nickName,\r\n      age: ageRange,\r\n      gender,\r\n    };\r\n\r\n    if (nicknameChecked === \"available\") {\r\n      const response = await updateUserProfile(user.id, updateUserProfileAPIBody);\r\n      if (response.RESULT === 200) {\r\n        setUserInfo(response.user);\r\n        showToast(UPDATE_PROFILE_SUCCESS, \"green\");\r\n        setTimeout(() => {\r\n          navigate(\"/\");\r\n        }, 1000);\r\n      }\r\n    } else {\r\n      nicknameInput.current.focus();\r\n      showToast(NICKNAME_CHECK_WARNING, \"yellow\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"userinfo-container\">\r\n      <div className=\"profile-img-container\">\r\n        <Avatar\r\n          size={120}\r\n          src={profileImagePreview}\r\n          radius=\"xl\"\r\n          className=\"profile-img\"\r\n        />\r\n\r\n        <div style={{ fontWeight: \"bold\" }}>{user.email}</div>\r\n        <div className=\"profile-img-edit\">\r\n          <input\r\n            style={{ display: \"none\" }}\r\n            ref={profileImgInput}\r\n            type=\"file\"\r\n            className=\"imgInput\"\r\n            accept=\"image/*\"\r\n            name=\"file\"\r\n            onChange={(e) => onImgChange(e)}\r\n          ></input>\r\n          <button onClick={onProfileImgBtnClick}>사진 수정</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"profile-input\">\r\n        <Input.Wrapper label=\"닉네임\" required>\r\n          &nbsp;\r\n          <span style={{ fontSize: \"12px\" }}>({nickName.length}/8자)</span>\r\n          <Input\r\n            maxLength={8}\r\n            placeholder=\"닉네임을 입력하세요.\"\r\n            onChange={(e) => onChangeHandler(e, \"nickname\")}\r\n            defaultValue={nickName}\r\n            ref={nicknameInput}\r\n          />\r\n        </Input.Wrapper>\r\n        <div className=\"nickname-check\">\r\n          <button onClick={(e) => onClickNicknameCheck(e)}>중복체크</button>\r\n          {nicknameChecked === \"empty\" ? (\r\n            <span className=\"unavailable\">닉네임 중복체크를 해주세요.</span>\r\n          ) : nicknameChecked === \"available\" ? (\r\n            <span className=\"available\">사용할 수 있는 닉네임입니다.</span>\r\n          ) : (\r\n            <span className=\"unavailable\">이미 사용중인 닉네임입니다.</span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"profile-input\">\r\n        <Input.Wrapper label=\"나이\" required>\r\n          <Select\r\n            placeholder=\"본인 연령대를 선택하세요.\"\r\n            data={AGE_RANGE}\r\n            defaultValue={ageRange}\r\n            onChange={(e) => onChangeHandler(e, \"age\")}\r\n          />\r\n        </Input.Wrapper>\r\n      </div>\r\n      <div className=\"profile-input\">\r\n        <Input.Wrapper label=\"성별\" required>\r\n          <Select\r\n            placeholder=\"성별을 선택하세요.\"\r\n            data={GENDER}\r\n            defaultValue={gender}\r\n            onChange={(e) => onChangeHandler(e, \"gender\")}\r\n          />\r\n        </Input.Wrapper>\r\n      </div>\r\n      <div className=\"profile-btn\">\r\n        <button onClick={onClickUserInfoUpdate}>프로필 수정하기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import { postCheckNickName } from \"../api/profile\";\r\n\r\nconst isNicknameCheck = async (nickname) => {\r\n  const postCheckNickNameAPIBody = {\r\n    nickname,\r\n  };\r\n\r\n  if (nickname === \"\") return \"empty\";\r\n\r\n  const response = await postCheckNickName(postCheckNickNameAPIBody);\r\n  if (response.RESULT === 200) return \"available\";\r\n  else if (response.RESULT === 403) return \"unavailable\";\r\n};\r\n\r\nexport default isNicknameCheck;\r\n","export const AGE_RANGE = [\r\n  { value: \"10~19\", label: \"10대\" },\r\n  { value: \"20~29\", label: \"20대\" },\r\n  { value: \"30~39\", label: \"30대\" },\r\n  { value: \"40~49\", label: \"40대\" },\r\n  { value: \"50~59\", label: \"50대\" },\r\n  { value: \"60~69\", label: \"60대\" },\r\n];\r\n\r\nexport const GENDER = [\r\n  { value: \"male\", label: \"남자\" },\r\n  { value: \"female\", label: \"여자\" },\r\n];\r\n"],"names":["postUserProfileImg","userId","formData","api","headers","data","showToast","ERROR_MESSAGE","Error","updateUserProfile","updateUserProfileAPIBody","postCheckNickName","postCheckNickNameAPIBody","state","useLocation","navigate","useNavigate","user","nicknameInput","useRef","profileImgInput","setUserInfo","useSetRecoilState","userInfoState","useState","profileImage","profileImagePreview","setProfileImagePreview","nickname","nickName","setNickName","nicknameChecked","setNicknameChecked","age","ageRange","setAgeRange","gender","setGender","onChangeHandler","e","target","value","onImgChange","FormData","encodeFileToBase64","files","append","id","fileBlob","reader","FileReader","readAsDataURL","Promise","resolve","onload","result","onClickNicknameCheck","isNicknameCheck","onClickUserInfoUpdate","response","RESULT","UPDATE_PROFILE_SUCCESS","setTimeout","current","focus","NICKNAME_CHECK_WARNING","className","Avatar","size","src","radius","style","fontWeight","email","display","ref","type","accept","name","onChange","onClick","preventDefault","click","Input","I","label","required","fontSize","length","maxLength","placeholder","defaultValue","Select","AGE_RANGE","GENDER"],"sourceRoot":""}