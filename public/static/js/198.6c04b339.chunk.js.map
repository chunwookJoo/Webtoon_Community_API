{"version":3,"file":"static/js/198.6c04b339.chunk.js","mappings":"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","sources":["api/profile.js","api/signUp.js","pages/SignUpPage.jsx","pages/signup/KakaoSignUp.jsx","utils/user.js","utils/userSelectItems.js"],"sourcesContent":["import { ERROR_MESSAGE } from \"../utils/constants\";\r\nimport showToast from \"../utils/toast\";\r\nimport api from \"./api\";\r\n\r\n/**\r\n * 프로필 사진 변경\r\n * @param {string} userId\r\n * @param {any} formData\r\n */\r\nconst postUserProfileImg = async (userId, formData) => {\r\n  try {\r\n    const { data } = await api.post(\r\n      `/auth/userinfo/profileimg/upload/${userId}`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      },\r\n    );\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"프로필 사진 업로드 에러\");\r\n  }\r\n};\r\n\r\nconst updateUserProfile = async (userId, updateUserProfileAPIBody) => {\r\n  try {\r\n    const { data } = await api.post(\r\n      `/auth/userinfo/update/${userId}`,\r\n      updateUserProfileAPIBody,\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"프로필 변경 에러\");\r\n  }\r\n};\r\n\r\nconst postCheckNickName = async (postCheckNickNameAPIBody) => {\r\n  try {\r\n    const { data } = await api.post(\"/auth/nickname/check\", postCheckNickNameAPIBody);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"닉네임 체크 에러\");\r\n  }\r\n};\r\n\r\nexport { postUserProfileImg, postCheckNickName, updateUserProfile };\r\n","import { ERROR_MESSAGE } from \"../utils/constants\";\r\nimport showToast from \"../utils/toast\";\r\nimport api from \"./api\";\r\n\r\nconst postSignUp = async (platform, signUpApiBody) => {\r\n  const platformUrl = platform === \"kakao\" ? \"kakaoSignUp\" : \"naverSignUp\";\r\n  try {\r\n    const { data } = await api.post(`/auth/${platformUrl}`, signUpApiBody);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, `${platform} 회원가입 에러`);\r\n  }\r\n};\r\n\r\nexport { postSignUp };\r\n","// npm package\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// design library (mantine)\r\nimport { Input, Select } from \"@mantine/core\";\r\n\r\n//api\r\nimport { postSignUp } from \"../api/signUp\";\r\n\r\n// recoil\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { jwtTokenState, userInfoState } from \"../store/recoilAuthState\";\r\n\r\n// components\r\nimport { ReactComponent as Logo } from \"../assets/img/logo.svg\";\r\n\r\nimport isNicknameCheck from \"../utils/user\";\r\n\r\n// icon\r\nimport \"../assets/scss/pages/registPage.scss\";\r\n\r\n// utils\r\nimport {\r\n  LOGIN_TOKEN,\r\n  NICKNAME_CHECK_WARNING,\r\n  SIGNUP_SUCCESS,\r\n  USER_ID,\r\n} from \"../utils/constants\";\r\nimport { setLocalStorage } from \"../utils/storage\";\r\nimport showToast from \"../utils/toast\";\r\nimport { AGE_RANGE, GENDER } from \"../utils/userSelectItems\";\r\n\r\nconst SignUpPage = (props) => {\r\n  const navigate = useNavigate();\r\n  const nicknameInput = useRef();\r\n  const { platform, account, token, id } = props;\r\n\r\n  const email = account.email;\r\n  const profileImage =\r\n    platform === \"kakao\" ? account.profile.thumbnail_image_url : account.profile_image;\r\n  const [ageRange, setAgeRange] = useState(\r\n    platform === \"kakao\" ? account.age_range : account.age.replace(\"-\", \"~\"),\r\n  );\r\n  const [gender, setGender] = useState(\r\n    account.gender === \"M\" || account.gender === \"male\" ? \"male\" : \"female\",\r\n  );\r\n\r\n  /**\r\n   * 공통으로 쓰이는 state\r\n   */\r\n  const setJwtToken = useSetRecoilState(jwtTokenState);\r\n  const setUserInfo = useSetRecoilState(userInfoState);\r\n  const [nickName, setNickName] = useState(\"\");\r\n  const [nicknameChecked, setNicknameChecked] = useState(\"empty\");\r\n\r\n  const onChangeHandler = (e, state) => {\r\n    if (state === \"nickname\") setNickName(e.target.value);\r\n    else if (state === \"age\") setAgeRange(e);\r\n    else if (state === \"gender\") setGender(e);\r\n  };\r\n\r\n  // 닉네임 중복 체크\r\n  const onClickNicknameCheck = async () => {\r\n    setNicknameChecked(await isNicknameCheck(nickName));\r\n  };\r\n\r\n  const onClickSignUp = async (e, platform) => {\r\n    const postSignUpKakaoAPIBody = {\r\n      kakaoToken: token,\r\n      id,\r\n      email,\r\n      profileImage,\r\n      nickname: nickName,\r\n      age: ageRange,\r\n      gender,\r\n    };\r\n\r\n    const postSignUpNaverAPIBody = {\r\n      naverToken: token,\r\n      id,\r\n      email,\r\n      profileImage,\r\n      nickname: nickName,\r\n      age: ageRange,\r\n      gender,\r\n    };\r\n\r\n    if (nicknameChecked === \"available\") {\r\n      const response = await postSignUp(\r\n        platform,\r\n        platform === \"kakao\" ? postSignUpKakaoAPIBody : postSignUpNaverAPIBody,\r\n      );\r\n      if (response.RESULT === 200) {\r\n        setJwtToken(response.jwtToken);\r\n        setUserInfo(response.user_data);\r\n        setLocalStorage(LOGIN_TOKEN, response.jwtToken);\r\n        setLocalStorage(USER_ID, response.user_data.id);\r\n        navigate(\"/\");\r\n        showToast(SIGNUP_SUCCESS, \"green\");\r\n      }\r\n    } else {\r\n      nicknameInput.current.focus();\r\n      showToast(NICKNAME_CHECK_WARNING, \"yellow\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"regist-container\">\r\n      <div className=\"regist-form-group\">\r\n        <div className=\"regist-title\">\r\n          <Logo />\r\n          <h3>회원가입</h3>\r\n        </div>\r\n        <div className=\"regist-form\">\r\n          <div className=\"regist-input\">\r\n            <Input.Wrapper label=\"이메일\" required>\r\n              <Input defaultValue={account.email} disabled />\r\n            </Input.Wrapper>\r\n          </div>\r\n          <div className=\"regist-input\">\r\n            <Input.Wrapper label=\"닉네임\" required>\r\n              &nbsp;\r\n              <span style={{ fontSize: \"12px\" }}>({nickName.length}/8자)</span>\r\n              <Input\r\n                maxLength={8}\r\n                placeholder=\"닉네임을 입력하세요.\"\r\n                onChange={(e) => onChangeHandler(e, \"nickname\")}\r\n                defaultValue={nickName}\r\n                ref={nicknameInput}\r\n              />\r\n            </Input.Wrapper>\r\n            <div className=\"nickname-check\">\r\n              {nicknameChecked === \"empty\" ? (\r\n                <span className=\"unavailable\">닉네임을 입력해주세요.</span>\r\n              ) : nicknameChecked === \"available\" ? (\r\n                <span className=\"available\">사용할 수 있는 닉네임입니다.</span>\r\n              ) : (\r\n                <span className=\"unavailable\">이미 사용중인 닉네임입니다.</span>\r\n              )}\r\n              <button onClick={(e) => onClickNicknameCheck(e)}>중복체크</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"regist-input\">\r\n            <Input.Wrapper label=\"나이\" required>\r\n              <Select\r\n                placeholder=\"본인 연령대를 선택하세요.\"\r\n                data={AGE_RANGE}\r\n                defaultValue={ageRange}\r\n                onChange={(e) => onChangeHandler(e, \"age\")}\r\n              />\r\n            </Input.Wrapper>\r\n          </div>\r\n          <div className=\"regist-input\">\r\n            <Input.Wrapper label=\"성별\" required>\r\n              <Select\r\n                placeholder=\"성별을 선택하세요.\"\r\n                data={GENDER}\r\n                defaultValue={gender}\r\n                onChange={(e) => onChangeHandler(e, \"gender\")}\r\n              />\r\n            </Input.Wrapper>\r\n          </div>\r\n        </div>\r\n        <div className=\"regist-btn\">\r\n          <button onClick={(e) => onClickSignUp(e, platform)}>회원가입하기</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpPage;\r\n","// npm package\r\nimport React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n// components\r\nimport SignUpPage from \"../SignUpPage\";\r\n\r\nconst KakaoSignUp = () => {\r\n  const { state } = useLocation();\r\n  const userData = state.data;\r\n  const platform = state.platform;\r\n\r\n  /**\r\n   * 카카오 액세스 토큰\r\n   * 카카오 회원 정보\r\n   */\r\n  const kakaoAccount = userData.kakao_account;\r\n  const kakaoToken = userData.access_token;\r\n  const kakaoId = userData.id;\r\n\r\n  return (\r\n    <SignUpPage\r\n      platform={platform}\r\n      account={kakaoAccount}\r\n      token={kakaoToken}\r\n      id={kakaoId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default KakaoSignUp;\r\n","import { postCheckNickName } from \"../api/profile\";\r\n\r\nconst isNicknameCheck = async (nickname) => {\r\n  const postCheckNickNameAPIBody = {\r\n    nickname,\r\n  };\r\n\r\n  if (nickname === \"\") return \"empty\";\r\n\r\n  const response = await postCheckNickName(postCheckNickNameAPIBody);\r\n  if (response.RESULT === 200) return \"available\";\r\n  else if (response.RESULT === 403) return \"unavailable\";\r\n};\r\n\r\nexport default isNicknameCheck;\r\n","export const AGE_RANGE = [\r\n  { value: \"10~19\", label: \"10대\" },\r\n  { value: \"20~29\", label: \"20대\" },\r\n  { value: \"30~39\", label: \"30대\" },\r\n  { value: \"40~49\", label: \"40대\" },\r\n  { value: \"50~59\", label: \"50대\" },\r\n  { value: \"60~69\", label: \"60대\" },\r\n];\r\n\r\nexport const GENDER = [\r\n  { value: \"male\", label: \"남자\" },\r\n  { value: \"female\", label: \"여자\" },\r\n];\r\n"],"names":["postUserProfileImg","userId","formData","api","headers","data","showToast","ERROR_MESSAGE","Error","updateUserProfile","updateUserProfileAPIBody","postCheckNickName","postCheckNickNameAPIBody","postSignUp","platform","signUpApiBody","platformUrl","props","navigate","useNavigate","nicknameInput","useRef","account","token","id","email","profileImage","profile","thumbnail_image_url","profile_image","useState","age_range","age","replace","ageRange","setAgeRange","gender","setGender","setJwtToken","useSetRecoilState","jwtTokenState","setUserInfo","userInfoState","nickName","setNickName","nicknameChecked","setNicknameChecked","onChangeHandler","e","state","target","value","onClickNicknameCheck","isNicknameCheck","onClickSignUp","postSignUpKakaoAPIBody","kakaoToken","nickname","postSignUpNaverAPIBody","naverToken","response","RESULT","jwtToken","user_data","setLocalStorage","LOGIN_TOKEN","USER_ID","SIGNUP_SUCCESS","current","focus","NICKNAME_CHECK_WARNING","className","Input","I","label","required","defaultValue","disabled","style","fontSize","length","maxLength","placeholder","onChange","ref","onClick","Select","AGE_RANGE","GENDER","useLocation","userData","kakaoAccount","kakao_account","access_token","kakaoId"],"sourceRoot":""}