{"version":3,"file":"static/js/43.850d86f1.chunk.js","mappings":"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","sources":["api/board.js","components/WebtoonInfoDetail.jsx","pages/board/BoardDetail.jsx","store/recoilBoardState.js"],"sourcesContent":["import { ERROR_MESSAGE } from \"../utils/constants\";\r\nimport showToast from \"../utils/toast\";\r\nimport api from \"./api\";\r\n\r\n/**\r\n * 웹툰 후기 작성\r\n * @param {any} postCreateBoardAPIBody\r\n * @returns\r\n */\r\nconst postCreateBoard = async (postCreateBoardAPIBody) => {\r\n  try {\r\n    const { data } = await api.post(\"/api/board/create\", postCreateBoardAPIBody);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"웹툰 후기 작성 에러\");\r\n  }\r\n};\r\n\r\n/**\r\n * 플랫폼별 웹툰 후기 리스트 조회\r\n * @param {string} url\r\n * @returns\r\n */\r\nconst getBoardList = async (url) => {\r\n  try {\r\n    const { data } = await api.get(`/api${url}`);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"웹툰 후기 리스트 조회 에러\");\r\n  }\r\n};\r\n\r\n/**\r\n * 웹툰 후기 조회\r\n * @param {string} boardId\r\n * @returns\r\n */\r\nconst getBoardDetail = async (boardId) => {\r\n  try {\r\n    const { data } = await api.get(`/api/board/${boardId}`);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"웹툰 후기 조회 에러\");\r\n  }\r\n};\r\n\r\n/**\r\n * 웹툰 후기 댓글 작성\r\n * @param {any} postCreateCommentAPIBody\r\n * @returns\r\n */\r\nconst postCreateComment = async (postCreateCommentAPIBody) => {\r\n  try {\r\n    const { data } = await api.post(\"/comment/insert\", postCreateCommentAPIBody);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"웹툰 후기 댓글 작성 에러\");\r\n  }\r\n};\r\n\r\n/**\r\n * 웹툰 후기 댓글 조회\r\n * @param {any} postCreateCommentAPIBody\r\n * @returns\r\n */\r\nconst getCommentList = async (boardId) => {\r\n  try {\r\n    const { data } = await api.get(`/comment/${boardId}`);\r\n    return data;\r\n  } catch (error) {\r\n    showToast(ERROR_MESSAGE, \"red\");\r\n    throw new Error(error, \"웹툰 후기 댓글 조회 에러\");\r\n  }\r\n};\r\n\r\nexport {\r\n  postCreateBoard,\r\n  getBoardList,\r\n  getBoardDetail,\r\n  postCreateComment,\r\n  getCommentList,\r\n};\r\n","import React from \"react\";\r\n\r\nconst WebtoonInfoDetail = (props) => {\r\n\tconst { webtoon } = props;\r\n\tconst platform =\r\n\t\twebtoon.service === \"naver\"\r\n\t\t\t? \"네이버 웹툰\"\r\n\t\t\t: webtoon.service === \"kakao\"\r\n\t\t\t? \"카카오 웹툰\"\r\n\t\t\t: \"카카오페이지 웹툰\";\r\n\r\n\tconst week = [\r\n\t\t\"월요일\",\r\n\t\t\"화요일\",\r\n\t\t\"수요일\",\r\n\t\t\"목요일\",\r\n\t\t\"금요일\",\r\n\t\t\"토요일\",\r\n\t\t\"일요일\",\r\n\t\t\"완결\",\r\n\t\t\"신작\",\r\n\t];\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"webtoon-img\">\r\n\t\t\t\t<img src={webtoon.img} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"webtoon-title\">\r\n\t\t\t\t<h3>{webtoon.title}</h3>\r\n\t\t\t\t<h5>\r\n\t\t\t\t\t{webtoon.author} | {platform}\r\n\t\t\t\t</h5>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"webtoon-week\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{webtoon.week.map((item, index) => {\r\n\t\t\t\t\t\treturn <li key={index}>{week[item]}</li>;\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default WebtoonInfoDetail;\r\n","// npm package\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n// api\r\nimport { getBoardDetail, getCommentList, postCreateComment } from \"../../api/board\";\r\n\r\n// design library (mantine)\r\nimport { Input } from \"@mantine/core\";\r\n// recoil\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { boardDataState } from \"../../store/recoilBoardState\";\r\nimport { userInfoState } from \"../../store/recoilAuthState\";\r\n\r\n// components\r\nimport WebtoonInfoDetail from \"../../components/WebtoonInfoDetail\";\r\n\r\n// icon\r\nimport \"../../assets/scss/pages/board/boardDetail.scss\";\r\n\r\n// utils\r\nimport showToast from \"../../utils/toast\";\r\nimport { CREATE_COMMENT_SUCCESS, EMPTY_COMMENT_WARNING } from \"../../utils/constants\";\r\n\r\nconst Comments = (props) => {\r\n  const [boardData, setBoardData] = useRecoilState(boardDataState);\r\n  const [commentData, setCommentData] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchCommentList = async () => {\r\n      const response = await getCommentList(boardData._id);\r\n      setCommentData(response);\r\n    };\r\n\r\n    fetchCommentList();\r\n  }, [props.commentState]);\r\n\r\n  return (\r\n    <div className=\"comment-lists\">\r\n      {commentData?.length === 0 ? (\r\n        <h6 style={{ textAlign: \"center\", paddingTop: \"2rem\" }}>\r\n          아직 댓글이 없습니다. <br />첫 댓글을 작성해보세요.\r\n        </h6>\r\n      ) : (\r\n        <>\r\n          {commentData?.map((item, index) => {\r\n            return (\r\n              <div key={index} className=\"comment\">\r\n                <div className=\"comment-user\">\r\n                  <span className=\"comment-img\">\r\n                    <img src={item?.author.profileImage} width={24} height={24} />\r\n                  </span>\r\n                  <div className=\"nickname\">\r\n                    <h5>{item?.author.nickname}</h5>\r\n                    <span>{item?.createdAt.split(\"T\")[0]}</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"comment-des\">{item?.comment}</div>\r\n              </div>\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EditWebtoonComment = () => {\r\n  const commentInput = useRef();\r\n  const userInfo = useRecoilValue(userInfoState);\r\n  const boardData = useRecoilValue(boardDataState);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [commentState, setCommentState] = useState();\r\n\r\n  const today = new Date();\r\n  const year = today.getFullYear();\r\n  const month = (\"0\" + (today.getMonth() + 1)).slice(-2);\r\n  const day = (\"0\" + today.getDate()).slice(-2);\r\n  const dateString = year + \"-\" + month + \"-\" + day;\r\n\r\n  const onClickCreateComment = async () => {\r\n    const postCreateCommentAPIBody = {\r\n      board_id: boardData._id,\r\n      comment,\r\n      author: userInfo._id,\r\n      createdAt: dateString,\r\n    };\r\n\r\n    if (comment === \"\") {\r\n      showToast(EMPTY_COMMENT_WARNING, \"yellow\");\r\n      commentInput.current.focus();\r\n    } else {\r\n      const response = await postCreateComment(postCreateCommentAPIBody);\r\n      if (response.RESULT === 200) {\r\n        setComment(\"\");\r\n        setCommentState(response);\r\n        showToast(CREATE_COMMENT_SUCCESS, \"green\");\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <section className=\"webtoon-review\">\r\n      <div>\r\n        <hr />\r\n      </div>\r\n      <Comments commentState={commentState} />\r\n      <div className=\"comment-container\">\r\n        <span className=\"comment-img\">\r\n          <img src={userInfo.profileImage} width={28} height={28} />\r\n        </span>\r\n        <Input\r\n          ref={commentInput}\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n          className=\"comment-input\"\r\n          placeholder=\"댓글을 남겨주세요.\"\r\n          radius=\"lg\"\r\n        />\r\n        <span className=\"comment-btn\">\r\n          <button onClick={onClickCreateComment}>등록</button>\r\n        </span>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst BoardDetail = () => {\r\n  const { state } = useLocation(); // board_id\r\n  const [boardData, setBoardData] = useRecoilState(boardDataState);\r\n\r\n  useEffect(() => {\r\n    const fetchBoardDetail = async () => {\r\n      window.scrollTo(0, 0);\r\n      const response = await getBoardDetail(state);\r\n      setBoardData(response);\r\n    };\r\n    fetchBoardDetail();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"board-detail-global\">\r\n      {boardData.length === 0 ? (\r\n        \"\"\r\n      ) : (\r\n        <>\r\n          <section className=\"board-title-container\">\r\n            <h1>{boardData.title}</h1>\r\n            <div className=\"creater\">\r\n              <span className=\"board-author-img\">\r\n                <img src={boardData.author.profileImage} width={30} height={30} />\r\n              </span>\r\n              <span className=\"nickname\">{boardData.author.nickname}</span>\r\n            </div>\r\n          </section>\r\n          <section className=\"webtoon-detail-container\">\r\n            <WebtoonInfoDetail webtoon={boardData.webtoon} />\r\n          </section>\r\n          <section className=\"board-description-container\">\r\n            <div>{boardData.description}</div>\r\n          </section>\r\n          <section>\r\n            <EditWebtoonComment />\r\n          </section>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardDetail;\r\n","import { atom } from \"recoil\";\r\n\r\nexport const boardListState = atom({\r\n\tkey: \"boardListState\",\r\n\tdefault: null,\r\n});\r\n\r\nexport const boardDataState = atom({\r\n\tkey: \"boardDataState\",\r\n\tdefault: [],\r\n});\r\n"],"names":["postCreateBoard","postCreateBoardAPIBody","api","data","showToast","ERROR_MESSAGE","Error","getBoardList","url","getBoardDetail","boardId","postCreateComment","postCreateCommentAPIBody","getCommentList","props","webtoon","platform","service","week","className","src","img","title","author","map","item","index","Comments","useRecoilState","boardDataState","boardData","useState","commentData","setCommentData","useEffect","fetchCommentList","_id","response","commentState","length","style","textAlign","paddingTop","profileImage","width","height","nickname","createdAt","split","comment","EditWebtoonComment","commentInput","useRef","userInfo","useRecoilValue","userInfoState","setComment","setCommentState","today","Date","dateString","getFullYear","getMonth","slice","getDate","onClickCreateComment","board_id","EMPTY_COMMENT_WARNING","current","focus","RESULT","CREATE_COMMENT_SUCCESS","Input","I","ref","value","onChange","e","target","placeholder","radius","onClick","state","useLocation","setBoardData","fetchBoardDetail","window","scrollTo","WebtoonInfoDetail","description","boardListState","atom","key","default"],"sourceRoot":""}